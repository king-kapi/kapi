generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ==================================
// Next-Auth Schemas
// ==================================

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ===========================
// Our Schemas
// ===========================

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // next-auth required fields

  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // extending model
  username      String    @default("")
  tag           String    @default("")
  bio           String    @default("")
  status        String    @default("")
  currentLobby  String?   @db.ObjectId

  friendOf   User?   @relation("Friend", fields: [friendOfId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  friendOfId String? @db.ObjectId
  friends    User[]  @relation("Friend")

  /// Nested objects had no data in the sample dataset to introspect a nested type.
  games         Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  interests     Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  // sentPartyRequests     PartyRequest[] @relation("SentPartyRequests")
  // receivedPartyRequests PartyRequest[] @relation("ReceivedPartyRequests")
  lobbyRequests Json?
  newUser       Boolean?
  party         Party?    @relation(fields: [partyId], references: [id])
  partyId       String?   @db.ObjectId
  Message       Message[]

  @@map("users")
}

model Message {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String
  content   String
  /// Nested objects had no data in the sample dataset to introspect a nested type.
  metadata  Json
  sender    User   @relation(fields: [senderId], references: [id])
  senderId  String @db.ObjectId
  timestamp Float
}

model Party {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  game String

  hostId String @db.ObjectId

  tags        String[]
  numPlayers  Int
  description String
  requests    Json[]   @default([])

  users User[]

  @@map("parties")
}

model Post {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  authorId       String @db.ObjectId
  authorTag      String
  authorUsername String
  content        String
  likes          Int
  timestamp      Float
}

// model PartyRequest {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   sender     User   @relation("SentPartyRequests", fields: [senderId], references: [id])
//   senderId   String @db.ObjectId
//   receiver   User   @relation("ReceivedPartyRequests", fields: [receiverId], references: [id])
//   receiverId String @db.ObjectId
//   party      Party  @relation(fields: [partyId], references: [id])
//   partyId    String @db.ObjectId
//
//   @@map("party-requests")
// }

model Game {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  image      String
  numPlayers Int[]

  @@map("games")
}
